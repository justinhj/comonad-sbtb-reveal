Things to do:

1. Intro slide, Yoppworks

2. Functional programming slides

Benefits of FP
Indicate to watch out for these benefits in the practical section at the end

3. Cats and category theory
Type classes are a programming pattern originiating in Haskell

4. Quick look at Bartoscs' book

Move FP in scala and category theory in scala to one slide

One slide on benefits of pure FP
  composition, testablility, equational reasoning

First few slides is still weak

Consider non-list examples for monad and functor

Slide on effects maybe

Drop the book recommendations until the last page

Notes from Rob's Talk Functional Programming with Effects

Something is referentially transparent or not
That's a side effect
we eval expressoins
we reason by substitution
we build bigger programs by composing smaller ones

category theory
a category is function composition
object is types
arrow is pure functions
associative composition is andThen

So what about

partiality - non-total
exceptions - errors
nondertiminism - lists
dependency injection - changes behaviour
  logging
mutable state
  imperative

new slide. pic of nero
  my first conf talk
  i've been practising this talk on my dog
  he knows 
